@using ConesaApp.Database.Data.Entities
@using ConesaApp.Client.Pages.Services
@inject IHttpService http

<div class="card">

    <button class="btn" >
        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="#822F33" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
        </svg>
    </button>

    <div class="datosCliente">
        <EditForm Model="cliente">
            <h3>Datos personales</h3>
            <div class="inputContainer">
                <label>Nombre</label>
                <InputText @bind-Value="@cliente.Nombre" placeholder="Nombre" />
            </div>
            <div class="inputContainer">
                <label>Apellido</label>
                <InputText @bind-Value="@cliente.Apellido" placeholder="Apellido" />
            </div>
            <div class="inputContainer">
                <label>Ciudad</label>
                <InputText @bind-Value="@cliente.Ciudad" placeholder="Ciudad" />
            </div>
            <div class="inputContainer">
                <label>Direccion</label>
                <InputText @bind-Value="@cliente.Direccion" placeholder="Direccion" />
            </div>
            <div class="inputContainer">
                <label>Telefono</label>
                <InputText @bind-Value="@cliente.Telefono" placeholder="Telefono" />
            </div>
            <div class="inputContainer">
                <label>Emial</label>
                <InputText @bind-Value="@cliente.Mail" placeholder="Email" />
            </div>
        </EditForm>
    </div>


    <div class="datosVehiculo">
        <EditForm Model="vehiculo">
            <h3>Datos del vehículo </h3>

            <div class="inputContainer">
                <label>Patente</label>
                <InputText @bind-Value="@vehiculo.Patente" placeholder="Patente" />
            </div>
            <div class="inputContainer">
                <label>Modelo</label>
                <InputText @bind-Value="@vehiculo.Marca" placeholder="Modelo" />
            </div>
            <div class="inputContainer">
                <label>Año</label>
                <InputNumber @bind-Value="@vehiculo.Año" placeholder="Año" />
            </div>
        </EditForm>
    </div>

    <div class="datosPoliza">
        <EditForm Model="poliza" OnValidSubmit="Grabar">
            <h3>Datos de la póliza</h3>

            <div class="inputContainer">
                <label>Nro Poliza</label>
                <InputNumber @bind-Value="@poliza.NroPoliza" placeholder="Nro Poliza" />
            </div>
            <div class="inputContainer">
                <label>Vigencia Poliza</label>
                <InputDate class="form-control" @bind-Value="poliza.InicioVigencia" placeholder="Inicio Vigencia" />
            </div>
            <div class="inputContainer">
                <label>Fin Vigencia</label>
                <InputDate class="form-control" @bind-Value="poliza.FinVigencia" placeholder="Fin Vigencia" />
            </div>
            <div class="inputContainer">
                <label>Valor Cuota</label>
                <InputNumber class="form-control" @bind-Value="poliza.ValorCuota" placeholder="Valor Cuota" />
            </div>
            <div class="inputContainer">
                <label>Valor Asegurado</label>
                <InputNumber class="form-control" @bind-Value="poliza.ValorAsegurado" placeholder="Valor asegurado" />
            </div>

            <div class="inputContainer">
                <label>Empresa</label>
                <select name="empresas" id="empresas-select" @bind="poliza.EmpresaID">
                    <option value="">Empresas</option>
                    @if (empresas.Count > 0)
                    {
                        @foreach (Empresa empresa in empresas)
                        {
                            <option value="@empresa.EmpresaID">@empresa.Nombre</option>
                        }
                    }
                </select>
            </div>

            <div class="inputContainer">
                <label>Tipo cobertura</label>
                <div>
                    <select name="coberturas" id="corturas-select" @bind="poliza.CoberturaID">
                        <option value="">Coberturas</option>
                        @if (coberturas.Count > 0)
                        {
                            @foreach (Cobertura cobertura in coberturas)
                            {
                                <option value="@cobertura.CoberturaID">@cobertura.Tipo</option>
                            }
                        }
                    </select>
                </div>
            </div>


            <button class="btn btn-primary" type="submit" id="btnGuardar">Guardar</button>

        </EditForm>
    </div>

</div>

@code {
    public Cliente cliente = new Cliente();
    public Vehiculo vehiculo = new Vehiculo();
    public Poliza poliza = new Poliza();
    // [Parameter] public EventCallback onValidSubmit { get; set; }
    public List<Empresa> empresas = new List<Empresa>();
    public List<Cobertura> coberturas = new List<Cobertura>();

    protected override async void OnInitialized()
    {
        await readEmpresas();
        await readCobertura();
        //  fecha actual
        poliza.InicioVigencia = DateTime.Now.Date;
        poliza.FinVigencia = DateTime.Now.Date;
    }
    private async Task readEmpresas()
    {
        var respuesta = await http.Get<List<Empresa>>("/Empresas");
        if (!respuesta.Error)
        {
            empresas = respuesta.Respuesta;
        }
    }

    private async Task readCobertura()
    {
        var respuesta = await http.Get<List<Cobertura>>("/Coberturas");
        if (!respuesta.Error)
        {
            coberturas = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        Console.WriteLine(cliente.Nombre); 

            // Crear cliente
            var clienteRespuesta = await http.Post<Cliente>("/api/Cliente", cliente);


            if (clienteRespuesta.Error)
            {
                Console.WriteLine($"Error al crear cliente: {clienteRespuesta.HttpResponseMessage}");
                return;
            }

            var clienteCreado = clienteRespuesta.Respuesta;
            vehiculo.ClienteID = clienteCreado.ClienteID;

            // Crear póliza
            var polizaRespuesta = await http.Post<Poliza>("/api/Polizas", poliza);
            if (polizaRespuesta.Error)
            {
                Console.WriteLine($"Error al crear póliza: {polizaRespuesta.HttpResponseMessage}");
                return;
            }

            var polizaID = polizaRespuesta.Respuesta;
            vehiculo.PolizaID = poliza.PolizaID;

            // Crear vehículo

            var vehiculoRespuesta = await http.Post<Vehiculo>("/api/Vehiculos", vehiculo);

            if (vehiculoRespuesta.Error)
            {
                Console.WriteLine($"Error al crear vehículo: {vehiculoRespuesta.HttpResponseMessage}");
                return;
            }

            Console.WriteLine("Cliente, póliza y vehículo creados exitosamente.");
       

    }
}
}