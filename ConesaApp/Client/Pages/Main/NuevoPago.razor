@using ConesaApp.Client.Pages.Services
@using ConesaApp.Database.Data.Entities
@inject IHttpService http
<div class="card">
    <EditForm Model="pago">
        <h4>Datos del pago</h4>
        <label>Fecha del pago</label>
        <InputDate @bind-Value="@pago.Fecha" style="border: none; border-bottom: 1px solid #b7abab; margin-bottom: 10px"/> 
        <label>Monto del pago</label>
        <InputNumber @bind-Value="@pago.Monto" style="border: none; border-bottom: 1px solid #b7abab; margin-bottom: 10px"/> 
        <h4>Datos del cliente</h4>
        <label>Nombre del cliente</label>
        <select @bind="pago.ClienteID" @onfocusout="readPolizasCliente">
            @foreach (Cliente cliente in listaClientes)
            {
                <option value="@cliente.ClienteID">@cliente.Nombre @cliente.Apellido</option>
            }
        </select>
        <label>Número de póliza</label>
        <select @bind="pago.PolizaID" >
            @foreach (Poliza poliza in polizas)
            {
                <option value="@poliza.PolizaID">@poliza.NroPoliza</option>
            }
        </select>
        <label>Método de pago</label>
        <select @bind="pago.MetodoPagoID" >
            @foreach (MetodoPago metodo in metodosDePago)
            {
                <option value="@metodo.MetodoPagoID">@metodo.Metodo</option>
            }
        </select>
        
    </EditForm> 
</div>
<div class="botones">
        <button class="btn"  @onclick="Cancelar" style="background-color: #822F33">Cancelar</button>
        <button class="btn" @onclick="Agregar" style="background-color: #1B8235">Guardar</button>
</div>

@code {
    [Parameter]
    public EventCallback Cancelar { get; set; }
    public Pago pago = new();
    private List<Cliente> listaClientes = new();
    private List<Poliza> polizas = new();
    private List<MetodoPago> metodosDePago = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await readClientes();
        pago.ClienteID = listaClientes.FirstOrDefault().ClienteID;
        await readPolizasCliente();
        pago.PolizaID = polizas.FirstOrDefault().PolizaID;
        await readMetodosDePago();
        pago.MetodoPagoID = metodosDePago.FirstOrDefault().MetodoPagoID;
        pago.UsuarioID = AuthenticationService.usuarioID;
    }
    private async Task readClientes()
    {
        var respuesta = await http.Get<List<Cliente>>($"/Clientes");
        if (!respuesta.Error)
        {
            listaClientes = respuesta.Respuesta;
        }
    }
    private async Task readPolizasCliente()
    {
        var respuesta = await http.Get<List<Poliza>>($"/Poliza/IdCliente/{pago.ClienteID}");
        if (!respuesta.Error)
        {
            polizas = respuesta.Respuesta;
        }
        StateHasChanged();
    }

    private async Task readMetodosDePago()
    {
        var respuesta = await http.Get<List<MetodoPago>>($"/MetodoPago");
        if (!respuesta.Error)
        {
            metodosDePago = respuesta.Respuesta;
        }
    }

    private async void Agregar()
    {
        var respuestaPago = await http.Post<Pago>("api/Pago",pago);
        if (respuestaPago.Error)
        {
            var body = respuestaPago.HttpResponseMessage;
        }
        await Cancelar.InvokeAsync(null);
    }
}
